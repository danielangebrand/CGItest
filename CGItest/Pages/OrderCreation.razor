@using CGItest.Shared;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using CGItest.Factories;
@page "/OrderCreation";
@inject DataService service;
@inject NavigationManager nav;

<h3>Skapa din order</h3>
<EditForm Model="@order">
    @*<DataAnnotationsValidator />*@
    @*<ValidationSummary />*@
    <p>
        <label>
            Ange ditt namn:
            <InputText id="Name" class="form-control" @bind-Value="order.Name" placeholder="Ange ett namn" />
        </label>
    </p>
    <thead>
        <tr>
            <th>Artikel</th>
            <th>Kvantiet</th>
        </tr>
    </thead>
    <InputSelect @bind-Value="@chosenArticleId"
                 DisplayName="chosen article">
        <option value="0" placeholder="Välj en artikel">Välj artikel</option>
        @foreach (var article in service.Articles)
        {
            <option value="@article.Id">@article.Name - @article.Price</option>
        }
    </InputSelect>
    <label>
        <InputNumber @bind-Value="ArticleQuantity" min="1" max="10000" placeholder="1-10000" />
    </label>
    @if (ArticleQuantity > 0 && chosenArticleId > 0)
    {
        <button class="btn btn-primary" @onclick="AddOrderRow">Lägg till orderrad</button>
    }
    else
    {
        <button class="btn btn-primary" disabled>Lägg till orderrad</button>
    }
    <ul>
        @foreach (var row in order.OrderRows)
        {
            <li>@row.Article.Name - @row.Quantity - @row.Sum</li>
        }
    </ul>
    @if (order.OrderRows.Count == 0)
    {
        <btn class="btn btn-secondary" @disabled>Namn & Orderrader krävs</btn>
    }
    else
    {
        <button class="btn btn-secondary" @onclick="CreateOrder">Skapa order</button>
    }
</EditForm>
@code {
    Order order = new();
    int chosenArticleId = 0;
    int ArticleQuantity { get; set; } = 0;

    void AddOrderRow() => service.CreateOrderRow(order, chosenArticleId, ArticleQuantity);
    void CreateOrder()
    {
        if (order.OrderRows.Count > 0 && order.Name.Length > 1 && order.Name.Length < 31)
        {
            service.CreateOrder(order);
            nav.NavigateTo("/Index");
        }
    }
}
